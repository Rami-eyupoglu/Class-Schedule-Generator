/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dersprogramiolusturma;

import java.sql.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Casper
 */
public class StudentPage extends javax.swing.JFrame {

    /**
     * Creates new form StudentPage
     */
    public StudentPage() throws SQLException {
        initComponents();
        String id = jlabelid.getText();
        //fill in the jComboBranch with branch list when the window open. 
        try {
            Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/Project", "ders", "ders");
            Statement s = con.createStatement();
            String query = "SELECT * FROM SYLLABUS WHERE STUDENT_ID = '"+id+"' ";
            ResultSet rs = s.executeQuery(query);
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("STUDENT_ID");
            model.addColumn("COURSE_NAME");
            model.addColumn("BRANCH");
            model.addColumn("DAY");
            model.addColumn("TİME");
            while (rs.next()) {
                String[] row = {rs.getString("STUDENT_ID"), rs.getString("COURSE_NAME"), rs.getString("BRANCH"), rs.getString("DAY"),
                    rs.getString("TİME")};
                model.addRow(row);

            }
            jTable1.setModel(model);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e, "Warnnig", JOptionPane.WARNING_MESSAGE);
        }
        try {
            java.sql.Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/Project", "ders", "ders");
            Statement s = con.createStatement();
            String query = "SELECT BRANCH FROM COURSES";
            ResultSet rs = s.executeQuery(query);
            HashSet<String> items = new HashSet<String>();
            while (rs.next()) {
                String BRANCH = rs.getString("BRANCH");
                //Avoid adding the same data towis.

                if (!items.contains(BRANCH)) {
                    jComboBranch.addItem(BRANCH);
                    items.add(BRANCH);
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(StudentPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        //fill in the table with data from COURSES table (data that match the ID from JLabelId)
        
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jlabelid = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBranch = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboxCourse = new javax.swing.JComboBox<>();
        jComboTime = new javax.swing.JComboBox<>();
        jLabelNAME = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboDay = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("student's page");

        jPanel1.setBackground(java.awt.Color.lightGray);

        jLabel2.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N
        jLabel2.setText("Student's ID : ");

        jlabelid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel4.setText("Branch");

        jLabel5.setText("Course");

        jComboBranch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jComboBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBranchActionPerformed(evt);
            }
        });

        jButton1.setText("Add the course ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete the course");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "STUDENT_ID", "COURSE_NAME", "BRANCH", "DAY", "TİME"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton3.setText("show syllabus");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 102, 102));
        jButton4.setText("Log out");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setText("Time");

        jComboxCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jComboxCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboxCourseActionPerformed(evt);
            }
        });

        jComboTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jComboTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboTimeActionPerformed(evt);
            }
        });

        jLabelNAME.setFont(new java.awt.Font("Sitka Text", 0, 14)); // NOI18N

        jLabel3.setText("DAY");

        jComboDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jComboDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboDayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboxCourse, 0, 205, Short.MAX_VALUE)
                                    .addComponent(jlabelid, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBranch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelNAME, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboTime, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboDay, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jlabelid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabelNAME, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboxCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboDay, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboTime, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        if (jComboBranch.getSelectedIndex() == 0 || jComboxCourse.getSelectedIndex() == 0
                || jComboDay.getSelectedIndex() == 0 || jComboTime.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "You have to fill in all the blankes!!", "WARNİNG", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                Connection con;
                con = DriverManager.getConnection("jdbc:derby://localhost:1527/Project", "ders", "ders");
                Statement s = con.createStatement();
                String query1 = "SELECT DAY , TİME FROM SYLLABUS WHERE STUDENT_ID='" + jlabelid.getText() + "' and DAY='" + jComboDay.getSelectedItem() + "' and TİME = '"+jComboTime.getSelectedItem()+"' ";
                ResultSet rs = s.executeQuery(query1);
                if (!(rs.next())) {
                    String query = "INSERT INTO SYLLABUS (STUDENT_ID,COURSE_NAME,BRANCH,DAY,TİME) VALUES (?,?,?,?,?)";
                    PreparedStatement pst = con.prepareCall(query);
                    pst.setString(1, jlabelid.getText());
                    pst.setString(2, (String) jComboxCourse.getSelectedItem());
                    pst.setString(3, (String) jComboBranch.getSelectedItem());
                    pst.setString(4, (String) jComboDay.getSelectedItem());
                    pst.setString(5, (String) jComboTime.getSelectedItem());
                    pst.executeUpdate();
                    JOptionPane.showMessageDialog(this, "course added successfully");
                } else {
                    JOptionPane.showMessageDialog(this, "Dublcite Course", "Warnning", JOptionPane.WARNING_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(AddDeleteCourse.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.dispose();
        StudentLoginPage as = new StudentLoginPage();
        as.setVisible(true);

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jComboTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboTimeActionPerformed

    }//GEN-LAST:event_jComboTimeActionPerformed

    private void jComboxCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboxCourseActionPerformed
        // clear the table befor adding any new data.
        jComboDay.removeAllItems();
        //adding Select item again.
        jComboDay.addItem("Select");
        try {
            java.sql.Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/Project", "ders", "ders");
            Statement s = con.createStatement();
            String query = "SELECT DAY FROM COURSES WHERE NAME='" + jComboxCourse.getSelectedItem() + "'";
            ResultSet rs = s.executeQuery(query);
            //using HashSet to store the data befor transfering it to jcomboDay .
            HashSet<String> items = new HashSet<String>();
            while (rs.next()) {
                String DAY = rs.getString("DAY");
                //Avoid adding the same data towis.

                if (!items.contains(DAY)) {
                    jComboDay.addItem(DAY);
                    items.add(DAY);
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(StudentPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboxCourseActionPerformed

    private void jComboBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBranchActionPerformed
        jComboxCourse.removeAllItems();
        jComboxCourse.addItem("Select");
        try {
            java.sql.Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/Project", "ders", "ders");
            Statement s = con.createStatement();
            String query = "SELECT NAME FROM COURSES WHERE BRANCH='" + jComboBranch.getSelectedItem() + "'";
            ResultSet rs = s.executeQuery(query);
            HashSet<String> items = new HashSet<String>();
            while (rs.next()) {
                String NAME = rs.getString("NAME");
                //Avoid adding the same data towis.

                if (!items.contains(NAME)) {
                    jComboxCourse.addItem(NAME);
                    items.add(NAME);
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(StudentPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBranchActionPerformed

    private void jComboDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboDayActionPerformed
        jComboTime.removeAllItems();
        jComboTime.addItem("Select");
        try {
            java.sql.Connection con = DriverManager.getConnection("jdbc:derby://localhost:1527/Project", "ders", "ders");
            Statement s = con.createStatement();
            String query = "SELECT TİME FROM COURSES WHERE DAY='" + jComboDay.getSelectedItem() + "' and NAME = '"+jComboxCourse.getSelectedItem()+"'";
            ResultSet rs = s.executeQuery(query);
            HashSet<String> items = new HashSet<String>();
            while (rs.next()) {
                String TİME = rs.getString("TİME");
                //Avoid adding the same data towis.

                if (!items.contains(TİME)) {
                    jComboTime.addItem(TİME);
                    items.add(TİME);
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(StudentPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboDayActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Connection con;
        try {
            con = DriverManager.getConnection("jdbc:derby://localhost:1527/Project", "ders", "ders");
            Statement s = con.createStatement();
            String query = "SELECT * FROM SYLLABUS WHERE STUDENT_ID = '"+jlabelid.getText()+"' ";
            ResultSet rs = s.executeQuery(query);
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("STUDENT_ID");
            model.addColumn("COURSE_NAME");
            model.addColumn("BRANCH");
            model.addColumn("DAY");
            model.addColumn("TİME");
            while (rs.next()) {
                String[] row = {rs.getString("STUDENT_ID"), rs.getString("COURSE_NAME"), rs.getString("BRANCH"), rs.getString("DAY"),
                    rs.getString("TİME")};
                model.addRow(row);

            }
            jTable1.setModel(model);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e, "Warnnig", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //checking if a row is selected.
        int n = jTable1.getSelectedRow();
        if (n == -1) {
            JOptionPane.showMessageDialog(this, "You did not choose any course !!", "Warnning", JOptionPane.WARNING_MESSAGE);
        }
        // We pull information form selected row.
        String id = jTable1.getValueAt(n, 0).toString();
        String course = jTable1.getValueAt(n, 1).toString();
        String day = jTable1.getValueAt(n, 3).toString();
        String time = jTable1.getValueAt(n, 4).toString();
        Connection con;
        DefaultTableModel model = new DefaultTableModel();
        try {
            con = DriverManager.getConnection("jdbc:derby://localhost:1527/Project", "ders", "ders");

            String query = "DELETE FROM SYLLABUS WHERE STUDENT_ID = '" + id + "' and COURSE_NAME = '" + course + "' and DAY = '" + day + "' and TİME ='" + time + "' ";
            Statement s = con.createStatement();
            s.executeUpdate(query);
            PreparedStatement pst = con.prepareCall(query);
            int deletedRow = pst.executeUpdate();
            Object[] option = {"Cancel", "NO", "YES"};
            int m = JOptionPane.showOptionDialog(this, "ARE YOU SURE WANT TO DROP THİS COURSE!!", "Question", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, option, option[0]);
            if(n == 2){
            if (deletedRow > 0) {
                JOptionPane.showMessageDialog(this, " Selected Course are Deleted!! ");
                model.removeRow(n);
            }
            jTable1.getModel();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new StudentPage().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(StudentPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBranch;
    private javax.swing.JComboBox<String> jComboDay;
    private javax.swing.JComboBox<String> jComboTime;
    private javax.swing.JComboBox<String> jComboxCourse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabelNAME;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    public javax.swing.JLabel jlabelid;
    // End of variables declaration//GEN-END:variables
}
